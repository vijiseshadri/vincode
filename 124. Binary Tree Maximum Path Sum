# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
 
    
    def maxPathSum(self, root: TreeNode) -> int:  
        max_sum = float("-inf")
        
        def maxPathUtil(node):
            nonlocal max_sum
            if (node is None):
                return 0
            l = max(maxPathUtil(node.left), 0)
            r = max(maxPathUtil(node.right), 0)
            l_r_node_sum = l + r + node.val
            l_node_sum = l + node.val
            r_node_sum = r + node.val
            max_sum = max(l_r_node_sum, l_node_sum, r_node_sum, node.val, max_sum)
            print(l, r,  l_r_node_sum, l_node_sum, r_node_sum, node.val, max_sum)
        
            return max(l_node_sum, r_node_sum)
        
        maxPathUtil(root)
        return max_sum

        
