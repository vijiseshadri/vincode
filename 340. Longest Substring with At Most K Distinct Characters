class Solution:
    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:
        sp = 0
        ep = 0
        len_s = len(s)
        
        distinct_dict = {}
        max_len_str = 0
        
        if (k == 0):
            return 0
    
        while (sp < len_s and ep < len_s):
            
            distinct_dict[s[ep]] = distinct_dict.get(s[ep] , 0) + 1
            if (len(distinct_dict) > k ):
                while (len(distinct_dict) > k and sp < ep):
                    if (s[sp] in distinct_dict):
                        distinct_dict[s[sp]] = distinct_dict.get(s[sp]) - 1
                        if (distinct_dict.get(s[sp]) == 0):
                                distinct_dict.pop(s[sp])
                    sp = sp + 1
                
                        
            len_str = ep - sp + 1
        
            max_len_str = len_str if len_str > max_len_str else max_len_str
            
            ep = ep + 1
            
    
        return max_len_str
            
            
